.grid-gutter-repeat(@n, @g, @i: 1) when (@i =< @n) {
  @v: @grid-1-gutter-start + @i * @grid-1-gutter-step;
  &.gutter-@{i}-around {
    padding-left: unit(@v/2, @grid-1-gutter-unit);
    padding-right: unit(@v/2, @grid-1-gutter-unit);
    box-sizing: padding-box;
    table& {
      width: 100%;
    }
  }
  &.gutter-@{i} {
    margin-left: unit(-@v/2, @grid-1-gutter-unit);
    margin-right: unit(-@v/2, @grid-1-gutter-unit);
    width: auto;
    table& {
      width: calc(100% ~" + " unit(@v, @grid-1-gutter-unit));
    }
    [class*="cell-"] > [class*="grid-"], [class*="cell-"] > .row > [class*="grid-"] {
      margin-left: unit(-@v/2, @grid-1-gutter-unit);
      margin-right: unit(-@v/2, @grid-1-gutter-unit);
    }
  }
  &[class*="gutter-@{i}"] {
    &:not(.gutter-margin) {
      > [class*="cell-"], > .row:not([class*="grid-"]) > [class*="cell-"], > tbody > tr > [class*="cell-"], > tbody > [class*="cell-"], > tr > [class*="cell-"] {
        padding-left: unit(@v/2, @grid-1-gutter-unit);
        padding-right: unit(@v/2, @grid-1-gutter-unit);
      }
    }
  }
  &.gutter-@{i} {
    > [class*="grid-"].row {
      padding-left: unit(@v/2, @grid-1-gutter-unit);
      padding-right: unit(@v/2, @grid-1-gutter-unit);
    }
  }
  &.gutter-@{i}-around {
    > [class*="grid-"].row {
      margin-left: unit(-@v, @grid-1-gutter-unit);
      margin-right: unit(-@v, @grid-1-gutter-unit);
      &[class*="gutter-"][class*="-around"] {
        margin-left: unit(-@v/2, @grid-1-gutter-unit);
        margin-right: unit(-@v/2, @grid-1-gutter-unit);
      }
    }
  }
  .grid-gutter(@g, @i, @v);
  .grid-gutter-repeat(@n, @g, (@i + 1));
}

.grid-gutter(@n, @s, @v, @i: 1) when (@i =< @n) {
  &[class*="gutter-@{s}"] {
    &.gutter-margin {
      > .cell-@{i}, > .row:not([class*="grid-"]) > .cell-@{i} {
        margin-left: unit(@v/2, @grid-1-gutter-unit);
        margin-right: unit(@v/2, @grid-1-gutter-unit);
        width: calc(unit((100 / @n) * @i, %) ~" - " unit(@v, @grid-1-gutter-unit));
      }
    }
  }
  .grid-gutter(@n, @s, @v, (@i + 1));
}


.grid-space-repeat(@n, @g, @i: 1) when (@i =< @n) {
  @v: @grid-1-space-start + @i * @grid-1-space-step;
  &.space-@{i}-around {
    padding-top: unit(@v/2, @grid-1-space-unit);
    padding-bottom: unit(@v/2, @grid-1-space-unit);
    box-sizing: padding-box;
  }
  &.space-@{i} {
    margin-top: unit(-@v/2, @grid-1-space-unit);
    margin-bottom: unit(-@v/2, @grid-1-space-unit);
    width: auto;
    [class*="cell-"] > [class*="grid-"], [class*="cell-"] > .row > [class*="grid-"] {
      margin-top: unit(-@v/2, @grid-1-space-unit);
      margin-bottom: unit(-@v/2, @grid-1-space-unit);
    }
  }
  &[class*="space-@{i}"] {
    &:not(.space-margin) {
      > [class*="cell-"], > .row:not([class*="grid-"]) > [class*="cell-"], > tbody > tr > [class*="cell-"], > tbody > [class*="cell-"], > tr > [class*="cell-"] {
        padding-top: unit(@v/2, @grid-1-space-unit);
        padding-bottom: unit(@v/2, @grid-1-space-unit);
      }
    }
  }
  &.space-@{i} {
    > [class*="grid-"].row {
      padding-top: unit(@v/2, @grid-1-space-unit);
      padding-bottom: unit(@v/2, @grid-1-space-unit);
    }
  }
  &.space-@{i}-around {
    > [class*="grid-"].row {
      margin-top: unit(-@v, @grid-1-space-unit);
      margin-bottom: unit(-@v, @grid-1-space-unit);
      &[class*="space-"][class*="-around"] {
        margin-top: unit(-@v/2, @grid-1-space-unit);
        margin-bottom: unit(-@v/2, @grid-1-space-unit);
      }
    }
  }
  .grid-space(@g, @i, @v);
  .grid-space-repeat(@n, @g, (@i + 1));
}

.grid-space(@n, @s, @v, @i: 1) when (@i =< @n) {
  &[class*="space-@{s}"] {
    &.space-margin {
      > .cell-@{i}, > .row:not([class*="grid-"]) > .cell-@{i} {
        margin-top: unit(@v/2, @grid-1-space-unit);
        margin-bottom: unit(@v/2, @grid-1-space-unit);
      }
    }
  }
  .grid-space(@n, @s, @v, (@i + 1));
}

.grid-cell(@n, @i: 1) when (@i =< @n) {
  > .cell-@{i}, > .row:not([class*="grid-"]) > .cell-@{i} {
    width: unit((100 / @n) * @i, %);
  }
  table& > tbody > .cell-@{i}, table& > tbody > tr > .cell-@{i}, table& > tr > .cell-@{i} {
    min-width: unit((100 / @n) * @i, %);
    max-width: unit((100 / @n) * @i, %);
    width: unit((100 / @n) * @i, %);
  }
  .grid-cell(@n, (@i + 1));
}

.grid-offset(@n, @i: 1) when (@i =< @n) {
  > .offset-left-@{i}, .offset-@{i} {
    margin-left: unit((100 / @n) * @i, %);
  }
  > .offset-right-@{i} {
    margin-right: unit((100 / @n) * @i, %);
  }
  .grid-offset(@n, (@i + 1));
}

.grid-@{grid-1-steps} {
  .grid-cell(@grid-1-steps);
  .grid-offset(@grid-1-steps);
  .grid-gutter-repeat(@grid-1-gutter-max, @grid-1-steps);
  .grid-space-repeat(@grid-1-space-max, @grid-1-steps);
}

[class*="grid-"] {
  display: flex;
  display: -webkit-flex;
  flex-wrap: wrap;
  flex-direction: row;
  align-items: stretch;
  &.reverse {
    flex-direction: row-reverse;
  }
  &.justify-center {
    justify-content: center;
  }
  &.justify-between {
    justify-content: space-between;
  }
  &.justify-around {
    justify-content: space-between;
  }
  &.justyfi-right {
    justify-content: flex-end;
  }
  &.floating {
    display: block;
    &.reverse {
      [class*="cell-"] {
        float: right;
      }
    }
    [class*="cell-"] {
      float: left;
    }
    .row {
      display: block;
      &:after, &:before {
        content: "";
        display: block;
        clear: both;
      }
    }
  }
  table& {
    display: table;
    border: 0;
    border-spacing: 0;
    tr, .row {
      display: table-row;
    }
    td, .cell {
      display: table-cell;
      &:first-child {
        padding-left: 0;
      }
      &:last-child {
        padding-left: 0;
      }
    }
  }
  [class*="cell-"] {
    box-sizing: padding-box;
  }
  .row {
    flex: 1 1 100%;
    display: flex;
    display: -webkit-flex;
    flex-wrap: wrap;
    &:not([class*="grid-"]) {
      flex-direction: inherit;
    }
  }
  
}
